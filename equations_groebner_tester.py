from sympy import *
from functions import *

#n is the number of equations and hence harmonics of the ghostly sound

def tester(n):
     #CCreation of some useful vector
     canonical_vector=[[] for i in range(n)]
     for i in range(n):
          for j in range(n):
               canonical_vector[i].append(1 if i==j else 0)
     uno = [1 for i in range(n)]
     cero = [0 for i in range(n)]

     #Creation of variables
     X = [symbols('x%d' % i) for i in range(n)]
     Y = [symbols('y%d' % i) for i in range(n)]
     Variables = X+Y
     init_printing(use_unicode=False, wrap_line=False)

     #Creation of the n equations
     equations=[]
     for i in range(n-1):
          equations.append(inner_prod(X,left_shift_n(X,i+1)))
     equations.append(X[0])
     Y.reverse()
     equations=substraction(equations,Y)

     #SOL=Groebner basis
     SOL=groebner(equations, Variables, domain='ZZ', order='lex')

     #SOL_at_X_0=Groebner basis evaluated at X=0
     SOL_at_X_0=[]
     for i in range(len(SOL)):
          SOL_at_X_0.append(substitution(SOL[i],X,cero))

     #LMSOL=set of leading monomials of the polynomials in the groebner basis
     LMSOL=[]
     for i in range(len(SOL)):
          LMSOL.append(polys.polytools.LM(SOL[i], order="lex"))

     #LMSOL_at_Y_1=set of leading monomials evaluated at Y=(1,1,...,1)
     #These monomials are used to find the leading monomials of the form x_i^k for some k avoiding the appearence of Y terms.
     LMSOL_at_Y_1=[]
     for i in range(len(LMSOL)):
          LMSOL_at_Y_1.append(substitution(LMSOL[i],Y,uno))

     #Groebner test-----------------------------------------------------------------------------------------------------

     Groebner_indexes=[]
     Groebner_tester=0
     for i in range(n):
          temp_list=[]
          for j in range(len(LMSOL_at_Y_1)):
               #By evaluating at X=e_j and comparing it to 1 we find the leading monomials of the form x_i^k for some k
               if substitution(LMSOL_at_Y_1[j],X,canonical_vector[i])==1:
                    temp_list.append(j)
          if len(temp_list)!=0:
               Groebner_indexes.append(temp_list[0])
               Groebner_tester=Groebner_tester+1
          else:
               Groebner_indexes.append("")
     #Groebner conclusion:
     #If Groebner_teste=n we get that every indeterminate appear in the leading monomials of the Groebner basis and then, if there is at least one solution, there is a finite amount of them. In other case, if there is at least one solution, there is an infinite amount of them.
     #Aditionally, the list Groebner_indexes is created and its ith term is the number of the first equation in the Groebner basis such that its leeading monomial is of the form x_i^k for some k>0


     #Hilbert test------------------------------------------------------------------------------------------------------
     Hilbert_tester=0
     problem_indexes=[]
     for i in range(len(SOL_at_X_0)):
          if SOL_at_X_0[i]==SOL[i]:
               Hilbert_tester=Hilbert_tester+1
               problem_indexes.append(i)
     #Hilbert conclusion:
     #If after this process Hilbert_tester>0, we have found some equations without X terms and hence with only Y terms. If this equations are not 0, 1 is in the ideal generated by the Groebner Basis and by the Hilbert test the system does not have any solution.

     #Conclusion--------------------------------------------------------------------------------------------------------
     log_existence="About the existence of solutions:\n\n"
     if Hilbert_tester>0:
          log_existence+="The system does not have any solution unless the following equations are satisfied:\n"
          for i in range(len(problem_indexes)):
               log_existence+=str(SOL_at_X_0[problem_indexes[i]])+"=0\n"
     else:
          log_existence+="There is at least one solution since 1 is not in the ideal generated by the Groebner basis."

     log_number_solutions="About the number of solutions:\n\n"
     if Groebner_tester==n:
          log_number_solutions+="If there is at least one solution, and y_j is not 0 for all j, then there is a finite amount of these since the following polynomials can be found in the Groebner basis:\n"
          for i in range(len(Groebner_indexes)):
               log_number_solutions+=str(SOL[Groebner_indexes[i]])+"\n"
     else:
          log_number_solutions+="If there is at least one solution, and y_j is not 0 for all j, then there is an infinite amount of these, since not all indeterminate appear as leading monomials."

     log_groebner_basis="Groebner basis:\n\n"
     for i in range(len(SOL)):
          log_groebner_basis+=str(SOL[i])+"\n"

     log=log_existence+"\n\n"+log_number_solutions+"\n\n"+log_groebner_basis

     # #HILBERT_TESTER=Set of leading monomials in LMSOL evaluated at X=(0,0,...,0).
     # HILBERT_TESTER=[]
     # for i in range(len(LMSOL)):
     #      if substitution(LMSOL[i],X,cero)==LMSOL[i]:
     #           HILBERT_TESTER.append(LMSOL[i])
     #
     # #LMSOL_NO_Y=set of monomials in LMSOL evaluated in Y=(1,1,1,...)
     # LMSOL_NO_Y=[]
     # for i in range(len(LMSOL)):
     #      LMSOL_NO_Y.append(substitution(LMSOL[i],Y,uno))
     #

     # #GROEBNER_TESTER=set of monomials of the form xj^k where every indeterminate is represented just once
     # GROEBNER_TESTER=[]
     # for i in range(n):
     #      temp_list=[]
     #      for j in range(len(LMSOL_NO_Y)):
     #           #By evaluating at X=e_j and comparing it to 1 we find the leading monomials of the form X_i^k for some k
     #           if substitution(LMSOL_NO_Y[j],X,canonical_vector[i])==1:
     #                #the temp_list contain the leading monomials of the form X_i^k for some k
     #                temp_list.append(LMSOL_NO_Y[j])
     #      if len(temp_list)!=0:
     #           #in thi step just one of the representant
     #           GROEBNER_TESTER.append(temp_list[0])
     # Resultados=""
     # #Groebner/Hilbert test is used
     # if len(HILBERT_TESTER)!=0:
     #      Resultados+="The system doesn't have solutions when one of the following equations is not null\n"
     #      for i in range(len(HILBERT_TESTER)):
     #           Resultados+=str(HILBERT_TESTER[i])+"\n"
     #      if len(GROEBNER_TESTER) < n:
     #           Resultados += "If none of the above equations is null, then there are infinite solutions since 1 is not in the ideal and there is at least one indeterminate that doesn't appear in the form xj^k in the groebner basis."
     #      else:
     #           Resultados += "If none of the above equations is null, then there are finite solutions since 1 is not in the ideal and the next monomials appear in the Groebner basis:\n"
     #           for i in range(len(GROEBNER_TESTER)):
     #                Resultados += str(GROEBNER_TESTER[i]) + "\n"
     #      Resultados+="If none of the above equations is satisfied"
     # elif len(GROEBNER_TESTER)<n:
     #      Resultados+="There are infinite solutions since 1 is not in the ideal and there is at least one indeterminate that doesn't appear in the form xj^k in the groebner basis."
     # else:
     #      Resultados+="There are finite solutions since 1 is not in the ideal and the next monomials appear in the Groebner basis:\n"
     #      for i in range(len(GROEBNER_TESTER)):
     #           Resultados += str(GROEBNER_TESTER[i]) + "\n"

     log_file = open("Test for "+str(n)+" equations.txt", "w")
     log_file.write(log)
     log_file.close()
     return equations





